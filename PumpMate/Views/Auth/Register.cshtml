@model PumpMate.Models.User

@{
    ViewData["Title"] = "Kayıt Ol";
}

<style>
    .register-container {
        background: var(--body-bg);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }
    
    .register-card {
        background: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-hover);
        padding: 2.5rem;
        width: 100%;
        max-width: 500px;
        border: 1px solid var(--border-color);
        transition: var(--transition);
    }
    
    .register-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-hover);
    }
    
    .register-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }
    
    .register-header h2 {
        color: var(--text-color);
        font-weight: 700;
        margin-bottom: 0.5rem;
        font-size: 2rem;
    }
    
    .register-header p {
        color: var(--text-color);
        font-size: 1rem;
        opacity: 0.8;
    }
    
    .form-control {
        border-radius: var(--border-radius);
        border: 2px solid var(--border-color);
        padding: 1rem 1.2rem;
        transition: var(--transition);
        background: var(--card-bg);
        color: var(--text-color);
        font-size: 1rem;
        width: 100%;
    }
    
    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25);
        background: var(--card-bg);
        color: var(--text-color);
    }
    
    .form-control::placeholder {
        color: var(--text-color);
        opacity: 0.6;
    }
    
    .btn-register {
        background: var(--gradient-primary);
        border: none;
        border-radius: var(--border-radius);
        padding: 1rem;
        font-weight: 600;
        font-size: 1.1rem;
        transition: var(--transition);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .btn-register:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-hover);
        background: var(--accent-color);
    }
    
    .login-link {
        text-align: center;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--border-color);
    }
    
    .login-link a {
        color: var(--primary-color);
        text-decoration: none;
        font-size: 1rem;
        font-weight: 600;
        transition: var(--transition);
        padding: 0.8rem 1.5rem;
        border-radius: var(--border-radius);
        display: inline-block;
        background: var(--hover-bg);
        border: 1px solid var(--border-color);
    }
    
    .login-link a:hover {
        color: var(--white);
        background: var(--primary-color);
        text-decoration: none;
        transform: translateY(-1px);
    }
    
    .alert {
        border-radius: var(--border-radius);
        border: none;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
    }
    
    .validation-summary {
        background-color: var(--accent-color);
        color: var(--white);
        border: 1px solid var(--accent-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .input-group {
        position: relative;
        margin-bottom: 1.5rem;
        display: flex;
        flex-direction: column;
    }
    
    .input-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-color);
        opacity: 0.6;
        z-index: 10;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2rem;
        height: 2rem;
    }
    
    .input-with-icon {
        padding-left: 3rem;
    }
    
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }
    
    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.85rem;
    }
    
    .strength-weak { color: var(--accent-color); }
    .strength-medium { color: var(--warning-color); }
    .strength-strong { color: var(--success-color); }
    
    .text-danger {
        color: var(--accent-color) !important;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }
    
    .field-error {
        color: var(--accent-color);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
        padding: 0.25rem 0.5rem;
        background-color: rgba(220, 53, 69, 0.1);
        border-radius: 0.25rem;
        border-left: 3px solid var(--accent-color);
    }
    
    .field-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 1.5rem;
    }
    
    .input-wrapper {
        position: relative;
    }
    
    @@media (max-width: 576px) {
        .register-container {
            padding: 1rem;
        }
        
        .register-card {
            padding: 2rem;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <h2>
                📝 Kayıt Ol
            </h2>
            <p>PumpMate'e katılın ve fitness yolculuğunuza başlayın</p>
        </div>
        
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="validation-summary">
                ⚠️
                Lütfen aşağıdaki hataları düzeltin:
                <ul class="mb-0 mt-2">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }
        
        <form asp-action="Register" method="post">
            <div class="field-container">
                <div class="input-wrapper">
                    <div class="input-icon">👤</div>
                    <input asp-for="Username" class="form-control input-with-icon" placeholder="Kullanıcı adı" required />
                </div>
                <span asp-validation-for="Username" class="field-error"></span>
            </div>
            
            <div class="form-row">
                <div class="field-container">
                    <div class="input-wrapper">
                        <div class="input-icon">🔒</div>
                        <input asp-for="Password" type="password" class="form-control input-with-icon" placeholder="Şifre" required />
                    </div>
                    <span asp-validation-for="Password" class="field-error"></span>
                    <div class="password-strength" id="passwordStrength"></div>
                </div>
                
                <div class="field-container">
                    <div class="input-wrapper">
                        <div class="input-icon">🔒</div>
                        <input name="ConfirmPassword" type="password" class="form-control input-with-icon" placeholder="Şifre tekrar" required />
                    </div>
                    @if (ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0)
                    {
                        <span class="field-error">@ViewData.ModelState["ConfirmPassword"].Errors.First().ErrorMessage</span>
                    }
                </div>
            </div>
            
            <button type="submit" class="btn btn-register text-white w-100">
                📝 Hesap Oluştur
            </button>
        </form>

        <div class="login-link">
            <p class="mb-0">
                Zaten hesabınız var mı? 
                <a asp-action="Login" asp-controller="Auth">
                    🔑 Giriş Yap
                </a>
            </p>
        </div>
    </div>
</div>

<script>
document.getElementById('Password').addEventListener('input', function() {
    const password = this.value;
    const strengthDiv = document.getElementById('passwordStrength');
    
    let strength = 0;
    let message = '';
    let className = '';
    
    if (password.length >= 8) strength++;
    if (/[a-z]/.test(password)) strength++;
    if (/[A-Z]/.test(password)) strength++;
    if (/[0-9]/.test(password)) strength++;
    if (/[^A-Za-z0-9]/.test(password)) strength++;
    
    if (strength < 3) {
        message = 'Zayıf şifre';
        className = 'strength-weak';
    } else if (strength < 4) {
        message = 'Orta güçlükte şifre';
        className = 'strength-medium';
    } else {
        message = 'Güçlü şifre';
        className = 'strength-strong';
    }
    
    strengthDiv.textContent = message;
    strengthDiv.className = 'password-strength ' + className;
});
</script>
